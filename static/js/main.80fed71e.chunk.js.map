{"version":3,"sources":["RouteListItem.js","lib/parser.js","RouteForm.js","OutputView.js","App.js","serviceWorker.js","index.js"],"names":["RouteListItem","props","handleChange","name","parsers","e","value","target","forEach","parser","setState","state","onRowClicked","row","render","TableRow","hover","key","index","onClick","TableCell","component","scope","route","align","host","port","certificateResolver","autoRedirectHttpToHttps","routeName","Component","ReplaceSpacesWithDash","replace","RouteForm","closeDialog","deleteRoute","saveRoute","entrypoint","useHTTPS","autoRedirect","httpEndpoint","handleCheckedChange","checked","Fragment","DialogTitle","id","DialogContent","Grid","container","DialogContentText","TextField","autoFocus","onChange","margin","label","type","fullWidth","FormControl","InputLabel","htmlFor","Select","native","inputProps","FormControlLabel","control","Switch","item","xs","Button","variant","color","DialogActions","console","log","OutputView","onClose","labels","push","this","routes","httpEntrypoint","code","map","line","join","direction","justify","alignItems","spacing","Typography","IconButton","App","addRoute","newRoute","length","editRow","currentRow","showOutputDialog","showOutput","closeOutputDialog","splice","Container","className","Table","aria-label","TableHead","TableBody","Dialog","open","aria-labelledby","fullScreen","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80fed71e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport HttpsIcon from \"@material-ui/icons/Https\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nclass RouteListItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      routeName: \"\"\n    };\n  }\n  handleChange = (name, parsers = []) => e => {\n    let value = e.target.value;\n    parsers.forEach(parser => {\n      if (typeof parser === \"function\") {\n        value = parser(value);\n      }\n    });\n\n    this.setState({\n      ...this.state,\n      [name]: value\n    });\n  };\n\n  onRowClicked = (row) => () => {\n      if (typeof this.props.onRowClicked === 'function') {\n        this.props.onRowClicked(row)\n      }\n  }\n  render = () => {\n    return (\n      <TableRow hover key={this.props.index} onClick={this.onRowClicked(this.props.index)}>\n        <TableCell component=\"th\" scope=\"row\">\n          {this.props.route.name}\n        </TableCell>\n        <TableCell align=\"left\">{this.props.route.host}</TableCell>\n        <TableCell align=\"left\">{this.props.route.port}</TableCell>\n        <TableCell align=\"left\">\n          {this.props.route.certificateResolver && (\n            <div>\n              {this.props.route.autoRedirectHttpToHttps && <LockOpenIcon />}\n              {this.props.route.autoRedirectHttpToHttps && <ArrowForwardIcon />}\n              <HttpsIcon />\n            </div>\n          )}\n          {!this.props.route.certificateResolver && <LockOpenIcon />}\n        </TableCell>\n      </TableRow>\n    );\n  };\n}\n\nexport default RouteListItem;\n","export function ReplaceSpacesWithDash(value) {\n    return value.replace(' ', '-');\n}","import React, { Component } from \"react\";\nimport {\n  Button,\n  TextField,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogContentText,\n  Grid,\n  Select,\n  FormControl,\n  InputLabel,\n  Switch,\n  FormControlLabel\n} from \"@material-ui/core\";\nimport { ReplaceSpacesWithDash } from \"./lib/parser\";\n\nclass RouteForm extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"Props form\", props);\n\n    this.state = {\n      name: this.props.route.name,\n      host: this.props.route.host,\n      port: this.props.route.port,\n      entrypoint: this.props.route.entrypoint\n    };\n    if (this.props.route.certificateResolver) {\n      this.state.useHTTPS = true;\n      this.state.certificateResolver = this.props.route.certificateResolver;\n      this.state.autoRedirect = this.props.route.autoRedirectHttpToHttps;\n      if (this.props.route.autoRedirectHttpToHttps) {\n        this.state.httpEndpoint = this.props.route.httpEndpoint;\n      }\n    }\n    this.state.index = this.props.index;\n  }\n\n  closeDialog = () => {\n    if (typeof this.props.closeDialog === \"function\") {\n      this.props.closeDialog();\n    }\n  };\n  deleteRoute = () => {\n    if (typeof this.props.deleteRoute === \"function\") {\n      this.props.deleteRoute();\n    }\n  };\n\n  saveRoute = () => {\n    if (typeof this.props.saveRoute === \"function\") {\n      const route = {\n        name: this.state.name,\n        host: this.state.host,\n        port: this.state.port,\n        entrypoint: this.state.entrypoint\n      };\n      if (this.state.useHTTPS) {\n        route.certificateResolver = this.state.certificateResolver;\n        route.autoRedirectHttpToHttps = this.state.autoRedirect;\n        if (this.state.autoRedirect) {\n          route.httpEndpoint = this.state.httpEndpoint;\n        }\n      }\n      this.props.saveRoute(route, this.state.index);\n    }\n  };\n\n  handleCheckedChange = name => e => {\n    this.setState({\n      [name]: e.target.checked\n    });\n  };\n  handleChange = (name, parsers = []) => e => {\n    let value = e.target.value;\n\n    if (typeof parsers === \"function\") {\n      parsers = [parsers];\n    }\n\n    parsers.forEach(parser => {\n      if (typeof parser === \"function\") {\n        value = parser(value);\n      }\n    });\n\n    this.setState({\n      ...this.state,\n      [name]: value\n    });\n  };\n  render = () => {\n    return (\n      <React.Fragment>\n        <DialogTitle id=\"form-dialog-title\">Edit Route</DialogTitle>\n        <DialogContent>\n          <Grid container>\n            <DialogContentText>\n              Each route will refer to one router connecting to a service on a\n              specific port.\n            </DialogContentText>\n            <TextField\n              autoFocus\n              value={this.state.name}\n              onChange={this.handleChange(\"name\", ReplaceSpacesWithDash)}\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Route Name\"\n              type=\"text\"\n              fullWidth\n            />\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              value={this.state.host}\n              onChange={this.handleChange(\"host\", ReplaceSpacesWithDash)}\n              id=\"host\"\n              label=\"Host\"\n              type=\"text\"\n              fullWidth\n            />\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              value={this.state.port}\n              onChange={this.handleChange(\"port\")}\n              id=\"port\"\n              label=\"Port on Service\"\n              type=\"number\"\n              fullWidth\n            />\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"entrypoint-native\">Entrypoint</InputLabel>\n              <Select\n                fullWidth\n                native\n                value={this.state.entrypoint}\n                onChange={this.handleChange(\"entrypoint\")}\n                inputProps={{\n                  name: \"entrypoint\",\n                  id: \"entrypoint-native\"\n                }}\n              >\n                <option value=\"\" />\n                <option value={\"web\"}>web</option>\n                <option value={\"websecure\"}>webSecure</option>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              fullWidth\n              control={\n                <Switch\n                  checked={this.state.useHTTPS}\n                  onChange={this.handleCheckedChange(\"useHTTPS\")}\n                  value=\"useHTTPS\"\n                />\n              }\n              label=\"Use HTTPS ?\"\n            />\n            {this.state.useHTTPS && (\n              <div>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor=\"cert-resolver-native\">\n                    Certificate Resolver\n                  </InputLabel>\n                  <Select\n                    fullWidth\n                    native\n                    value={this.state.certificateResolver}\n                    onChange={this.handleChange(\"certificateResolver\")}\n                    inputProps={{\n                      name: \"certificateResolver\",\n                      id: \"cert-resolver-native\"\n                    }}\n                  >\n                    <option value=\"\" />\n                    <option value={\"awsRoute53\"}>awsRoute53</option>\n                  </Select>\n                </FormControl>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={this.state.autoRedirect}\n                      onChange={this.handleCheckedChange(\"autoRedirect\")}\n                      value=\"autoRedirect\"\n                    />\n                  }\n                  label=\"Auto redirect HTTP to HTTPS?\"\n                />\n                {this.state.autoRedirect && (\n                  <FormControl fullWidth>\n                    <InputLabel htmlFor=\"cert-resolver-native\">\n                      HTTP Endpoint\n                    </InputLabel>\n                    <Select\n                      native\n                      value={this.state.httpEndpoint}\n                      onChange={this.handleChange(\"httpEndpoint\")}\n                      inputProps={{\n                        name: \"httpEndpoint\",\n                        id: \"httpEndpoint\"\n                      }}\n                    >\n                      <option value=\"\" />\n                      <option value={\"web\"}>web</option>\n                      <option value={\"websecure\"}>webSecure</option>\n                    </Select>\n                  </FormControl>\n                )}\n              </div>\n            )}\n            <Grid item xs={12}>\n              <Button\n                onClick={this.deleteRoute}\n                variant=\"outlined\"\n                color=\"secondary\"\n              >\n                Delete Route\n              </Button>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={this.closeDialog}>\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={this.saveRoute}>\n            Save Route\n          </Button>\n        </DialogActions>\n      </React.Fragment>\n    );\n  };\n}\n\nexport default RouteForm;\n","import React, { Component } from \"react\";\nimport { DialogContent, Grid, Typography, IconButton } from \"@material-ui/core\";\nimport \"./OutputView.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nclass OutputView extends Component {\n    onClose= () => {\n        if (typeof this.props.onClose === 'function') {\n            this.props.onClose();\n        }\n    }\n\n  render() {\n    const labels = [];\n    labels.push(\"traefik.enable=true\");\n    this.props.routes.forEach(route => {\n      const {\n        name,\n        host,\n        certificateResolver,\n        port,\n        entrypoint,\n        httpEntrypoint,\n        autoRedirectHttpToHttps\n      } = route;\n      labels.push(`traefik.http.routers.${name}.entrypoints=${entrypoint}`);\n      labels.push(`traefik.http.routers.${name}.rule=Host(\\`${host}\\`)`);\n      labels.push(\n        `traefik.http.services.${name}.loadbalancer.server.port=${port}`\n      );\n      // HTTPS Stuff\n      if (certificateResolver) {\n        labels.push(\n          `traefik.http.routers.${name}.tls.certresolver=${certificateResolver}`\n        );\n        if (autoRedirectHttpToHttps) {\n          labels.push(`traefik.http.routers.${name}.service=${name}`);\n          // Auto redirect stuff\n          labels.push(\n            `traefik.http.routers.${name}-redirect.entrypoints=${httpEntrypoint}`\n          );\n          labels.push(\n            `traefik.http.routers.${name}-redirect.rule=Host(\\`${host}\\`)`\n          );\n          labels.push(\n            `traefik.http.services.${name}-redirect.loadbalancer.server.port=${port}`\n          );\n          labels.push(\n            `traefik.http.middlewares.${name}.redirectscheme.permanent=true`\n          );\n          labels.push(\n            `traefik.http.middlewares.${name}.redirectscheme.scheme=https`\n          );\n        }\n      }\n    });\n    const code = labels.map(line => `  - \"${line}\"`).join(\"\\n\");\n    return (\n      <DialogContent>\n        <Grid \n            container \n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\" \n            spacing={2} >\n          <Grid item>\n              <Typography variant=\"h5\">Labels for Docker Compose</Typography>\n          </Grid>\n          <Grid item>\n              <IconButton onClick={this.onClose}>\n                <CloseIcon />\n              </IconButton>\n          </Grid>\n          <Grid item xs={12}>\n            <code>{code}</code>\n          </Grid>\n        </Grid>\n      </DialogContent>\n    );\n  }\n}\n\nexport default OutputView;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Dialog,\n  Container,\n  Grid,\n  Button,\n  Table,\n  TableHead,\n  TableBody,\n  TableCell,\n  TableRow,\n  Typography\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RouteListItem from \"./RouteListItem\";\nimport RouteForm from \"./RouteForm\";\nimport OutputView from \"./OutputView\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentRow: -1,\n      routes: [],\n      showOutput: false\n    };\n  }\n\n  addRoute = () => {\n    const routes = this.state.routes;\n    const newRoute = {\n      name: `route-${routes.length}`\n    };\n    routes.push(newRoute);\n    this.setState({\n      routes: routes\n    });\n  };\n\n  editRow = row => {\n    this.setState({\n      currentRow: row\n    });\n  };\n\n  saveRoute = (route, index) => {\n    const routes = this.state.routes;\n    routes[index] = route;\n    this.setState({ routes, currentRow: -1 });\n  };\n\n  closeDialog = () => {\n    this.setState({ currentRow: -1 });\n  };\n\n  showOutputDialog = () => {\n    this.setState({ showOutput: true });\n  };\n\n  closeOutputDialog = () => {\n    this.setState({ showOutput: false });\n  };\n\n  deleteRoute = index => {\n    let routes = this.state.routes;\n    routes.splice(index, 1);\n    this.setState({ routes, currentRow: -1 });\n  };\n\n  render() {\n    return (\n      <Container className=\"app\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"flex-start\"\n          spacing={4}\n        >\n          <Grid item>\n            <Typography variant=\"h4\">Traefik Label Builder</Typography>\n          </Grid>\n          <Grid item>\n            <Button\n              onClick={this.showOutputDialog}\n              variant=\"contained\"\n              color=\"secondary\"\n            >\n              Show Output\n            </Button>\n          </Grid>\n          <Table className=\"table\" aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell component=\"th\">Name</TableCell>\n                <TableCell component=\"th\">Host/path</TableCell>\n                <TableCell component=\"th\">Service Port</TableCell>\n                <TableCell component=\"th\">Service Security</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.routes.map((route, index) => (\n                <RouteListItem\n                  route={route}\n                  key={index}\n                  index={index}\n                  onRowClicked={this.editRow}\n                ></RouteListItem>\n              ))}\n            </TableBody>\n          </Table>\n          <Grid item xs={12}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.addRoute}\n              fullWidth\n            >\n              <AddIcon /> Add Route\n            </Button>\n          </Grid>\n        </Grid>\n        <Dialog\n          open={this.state.currentRow > -1}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          {this.state.currentRow > -1 && (\n            <RouteForm\n              route={this.state.routes[this.state.currentRow]}\n              index={this.state.currentRow}\n              closeDialog={this.closeDialog}\n              saveRoute={this.saveRoute}\n              deleteRoute={this.deleteRoute}\n            />\n          )}\n        </Dialog>\n        <Dialog\n          open={this.state.showOutput}\n          aria-labelledby=\"form-dialog-title\"\n          fullScreen\n        >\n          <OutputView\n            routes={this.state.routes}\n            onClose={this.closeOutputDialog}\n          />\n        </Dialog>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}